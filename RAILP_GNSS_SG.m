%{
MILP+GNSS+fully_Ka
generated by yzb_nju, 2020,12,3
%}

%clear workplace
clear;clc;close all;

%scenario
%input-------------------------------------------------------------------------------------
stateNum = 2016;% number of states
Ns = 30; %number of satellites
Ng = 3; %number of ground stations, Kashi, Sanya, Weinan
Ng_matrix = [3 3 4]; %number of terminals per ground station
Nvg = sum(Ng_matrix); %number of virtual ground nodes
N = Ns + Nvg; %total number of nodes

K = 20; %number of slots
Lmin = 6; %set links with at least Lmin diferent satellites to satisfy PDOP limitation
M1 = K+1; % big M used to transform constraints, for PDOP
M2 = K+1; % big M user for delay--overseas nodes to domestic nodes
M3 = K+1; % big M user for delay--domestic nodes to GSs

eta1 = 0.5; % weight for obj1
eta2 = 0.5; % weight for obj2
%timeRecord = zeros(stateNum,1);

for state=125:288
    disp(state);
    %Vs, visibility between satellites
    %Vg, visibility between satellites and Ng ground stations
    Vs = load(['C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Input\access_sat\state_',num2str(state),'.txt']);
    Vg = load(['C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Input\access_sta3\state_',num2str(state),'.txt']);
    if (size(Vs,1)~=Ns)||(size(Vg,1)~=Ng)
        error('error in Vs and Vg');
    end
    %Vg_, visibility, regard Ng ground stations as 1 station
    Vg_ = logical(sum(Vg));
    
    %Node_d, set of domestic satellite nodes
    %Node_o, set of overseas satellite nodes
    Node_d = find(Vg_(:)==1);
    Node_o = find(Vg_(:)==0);
    NNode_d = length(Node_d);
    NNode_o = length(Node_o);
    %Node_g, set of ground station nodes
    Node_g = [];
    for i=1:Nvg
        Node_g = [Node_g;Ns+i];
    end
    
    
    
    %visualize each GS as K GSs, K is the corresponding number of terminals
    Vg_temp = zeros(Nvg,Ns);
    row = 0;
    for i=1:1:Ng
        num = Ng_matrix(i);
        if num~= 0
            for j=1:1:num
                row = row + 1;
                Vg_temp(row,:) = Vg(i,:);
            end
        end
    end
    
    %consttruct one-slot visibility matrix including GSs
    Vsg_temp = zeros(N,N);
    
    Vsg_temp(1:Ns,1:Ns) = Vs;
    Vsg_temp(Ns+1:size(Vsg_temp,1),1:Ns) = Vg_temp;
    Vsg_temp(1:Ns,Ns+1:size(Vsg_temp,1)) = Vg_temp';
    Vsg_temp(Ns+1:size(Vsg_temp,1),Ns+1:size(Vsg_temp,1)) = 0;
    
    %consttruct K-slot visibility matrix including GSs
    Vsg = zeros(N,N,K);
    for k=1:K
        Vsg(:,:,k)=Vsg_temp;
    end
    
    % weight-->traffic flow
    %F1 = [1 1 ... 1]
    F1_o = ones(1,NNode_o);
    F1_d = ones(1,NNode_d);
    
    %set of satellites that can receive short messages from users and relay them
    Nm = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23];
    
    %sm short messages and rm remote messages per slot
    sm = 4;
    rm = 6;
    
    F2=zeros(1,Ns);
    for i=1:1:Ns
        if(ismember(i,Nm))
            F2(1,i) = sm+rm;
        else
            F2(1,i) = rm;
        end       
    end
    
    F2_o = F2(1,Node_o);
    F2_d = F2(1,Node_d);
    
    
    %-------------------------------------------------------------------------------------
    
    %decision variables-------------------------------------------------------------------------------------
    Y = binvar(N,N,K);
    %X = intvar(N,N,K,'full');
    %B = intvar(N,K+1,'full');
    
    Phi = binvar(N,N,'full'); %introduced for PDOP constraints
    Psai = binvar(NNode_o,K); %introduced for delay optimization objection--overseas nodes to domestic nodes
    Omega = binvar(NNode_d,K); %introduced for delay optimization objection--domestic nodes to GSs
    
    %DeltaK = binvar(length(Node_o),K-k+1);
    %introduced for calculating total delay, DeltaK(i,j)==1, there is a consecutive K 0 in Psai
    for k=1:1:K
        eval(['Delta',num2str(k),'=binvar(NNode_o,K-',num2str(k),'+1, ''full'');']);
    end
    
    %SigmaK = binvar(length(Node_d),K-k+1);
    for k=1:1:K
        eval(['Sigma',num2str(k),'=binvar(NNode_d,K-',num2str(k),'+1, ''full'');']);
    end
    
    
    %-------------------------------------------------------------------------------------
    
    %constraints-------------------------------------------------------------------------------------
    Cons = [];
    
    
    %visibility constraints
    
    Cons=[Cons,Y<=Vsg];
    %{
for i=1:1:K
    C = [C, triu(Y(:,:,k))<=triu(Vs)];
end
    %}
    
    
    % simultaneous links for each node no more than 1
    Cons = [Cons, sum(Y) <= ones(1,N,K)];
    
    
    
    
    Y_t = sum(Y,3);
    Cons = [Cons, Phi<=Y_t<=M1.*Phi];
    
    % PDOP constriants, only for satellite nodes, at least set up links with Lmin different satellites
    for i=1:Ns
        Cons = [Cons, (sum(Phi(i,1:Ns))>=Lmin):'PDOP'];
    end
    %{
    for i=1:N
        for j=1:N
            Y_t = sum(Y,3);
            Cons = [Cons, Phi(i,j)<=Y_t(i,j)<=M1.*Phi(i,j)];
        end
    end
    %}
    
    
    %Psai is introduced to describe if a node i is connected to a domestic node
    %in slot k
    flag = 0;
    for i=1:Ns
        if(ismember(i,Node_o))
            flag = flag + 1;
            for k=1:K
                temp = 0;
                for j=1:Ns
                    if(ismember(j,Node_d))
                        temp = temp+Y(i,j,k);
                    end
                end
                Cons = [Cons, Psai(flag,k) == temp];
                %Psai(i,k) = temp;
            end
        end
    end
    
    %Omega is introduced to describe if a domestic node i is connected to a GS node
    %in slot k
    flag = 0;
    for i=1:Ns
        if(ismember(i,Node_d))
            flag = flag + 1;
            for k=1:K
                temp = 0;
                for j=Ns+1:N
                    if(ismember(j,Node_g))
                        temp = temp+Y(i,j,k);
                    end
                end
                Cons = [Cons, Omega(flag,k) == temp];                
            end
        end
    end
    
    
    
    
    for MAXSLOT = 1:1:20
        % max delay constrint matrix
        eval(['Cons_slot',num2str(MAXSLOT),'=zeros(K,K-',num2str(MAXSLOT),'+1);']);
        %Cons_slot = zeros(K,K-MAXSLOT+1);
        for i=1:K-MAXSLOT+1
            eval(['Cons_slot',num2str(MAXSLOT),'(i:i+',num2str(MAXSLOT),'-1,i)=1;']);
            %Cons_slot(i:i+MAXSLOT-1,i)=1;
        end
        
        % delay probe for overseas nodes
        %Delta = Psai_No*Cons_slot1
        eval(['Delta = Psai*Cons_slot',num2str(MAXSLOT),';']);
        
        %Delta1<=Delta<=M2.*Delta1, elements in Delta could be bigger than
        %1, elements in Delta1 are 0 or 1
        eval(['Cons = [Cons, Delta',num2str(MAXSLOT),'<=Delta<=M2.*Delta',num2str(MAXSLOT),'];']);
        
        
        
        % delay probe for domestic nodes
        %Sigma = Omega*Cons_slot1
        eval(['Sigma = Omega*Cons_slot',num2str(MAXSLOT),';']);
        
        %Sigma1<=Sigma<=M3.*Sigma1, elements in Sigma could be bigger than
        %1, elements in Sigma1 are 0 or 1
        eval(['Cons = [Cons, Sigma',num2str(MAXSLOT),'<=Sigma<=M3.*Sigma',num2str(MAXSLOT),'];']);
        
    end
                
    %-------------------------------------------------------------------------------------
    
    
    %objection and resolution-------------------------------------------------------------------------------------
    
    % the total number of 1 in Delta1, Delta2 ... Delta20 is the delay of
    % all overseas satellites to domestic nodes
    obj1 = 0;
    for MAXSLOT = 1:1:20
        %without weight: obj = obj+sum(sum(Delta1))        
        %with weight: obj = obj + F1_o*sum(DeltaK,2);
        eval(['obj1 = obj1 + F2_o*(sum(Delta',num2str(MAXSLOT),',2));']);
    end
    
    % the total number of 1 in Sigma1, Sigma2 ... Sigma20 is the delay of
    % all domestic satellites to GSs
    obj2 = 0;
    for MAXSLOT = 1:1:20
        %without weight: obj = obj + sum(sum(Sigma1))
        %with weight: obj = obj + F1_d*sum(SigmaK,2);
        eval(['obj2 = obj2 + F2_d*(sum(Sigma',num2str(MAXSLOT),',2));']);
    end
    
    obj = eta1.*obj1 + eta2.*obj2;
    
    tic
    ops = sdpsettings('verbose',2,'solver','gurobi');
    reuslt = optimize(Cons,-obj,ops);
    %result = solvesdp(Constraints, obj, ops);
    toc
    
    if reuslt.problem == 0 % problem =0 代表求解成功
        timeRecord(state,1) = toc;
        disp(['运行时间: ',num2str(toc)]);
        topo = value(Y);
        file = ['C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Result\RAILP\30_10_eta0.5_Lmin6_sm4_rm6\',num2str(state), '.txt'];
        fid = fopen(file,'w');
        fclose(fid);
        for slot=1:K
            dlmwrite(file,topo(:,:,slot),'delimiter','\t','newline','pc','-append');
        end
        
    else
        disp('求解出错');
        error('求解出错');
    end
    
end

%timefile = 'C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Result\ILP\30_6_eta0.9_Lmin6_sm4_rm6\RunTime_1_288.mat';
%save(timefile,'timeRecord');
%-------------------------------------------------------------------------------------