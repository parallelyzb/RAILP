%{
MILP+GNSS
generated by yzb_nju, 2020,2,28
%}

%求小场景测试结果 ILP

%{
do not model by a symmetrical decision variable and a symmetrical constant variable
instead of x<= y with symmetric data you do x(:)<=y(:) or triu(x) <= triu(y) etc
see: https://groups.google.com/forum/#!topic/yalmip/Iquk9LJiOGE
%}

%clear workplace
clear;clc;close all;

%scenario
%input-------------------------------------------------------------------------------------
stateNum = 2016;% number of states
Ns = 7; %number of satellites
Ng = 1; %number of ground stations, Kashi, Sanya, Weinan
Ng_matrix = [1 0]; %number of terminals per ground station
Nvg = sum(Ng_matrix); %number of virtual ground nodes
N = Ns + Nvg; %total number of nodes

K = 9; %number of slots

Lmin = 2; %set links with at least Lmin diferent satellites to satisfy PDOP limitation

M1 = 25; % big M used to transform constraints, PDOP constraints
M2 = 50; % big M, traffic constraints
%Vs, visibility between satellites
%Vg, visibility between satellites and ground stations
%Vs, visibility between satellites
%Vg, visibility between satellites and Ng ground stations
Vs = load('C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Input\test\access_sat\state_1.txt');
Vg = load('C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Input\test\access_sta1\state_1.txt');
if (size(Vs,1)~=Ns)||(size(Vg,1)~=Ng)
    error('error in Vs and Vg');
end
%Vg_, visibility, regard Ng ground stations as 1 station
%Vg_ = logical(sum(Vg));

%Node_d, set of domestic satellite nodes
%Node_o, set of overseas satellite nodes
Node_d = find(Vg(:)==1);
Node_o = find(Vg(:)==0);
NNode_d = length(Node_d);
NNode_o = length(Node_o);
%Node_g, set of ground station nodes
Node_g = [];
for i=1:Nvg
    Node_g = [Node_g;Ns+i];
end



%visualize each GS as K GSs, K is the corresponding number of terminals
Vg_temp = zeros(Nvg,Ns);
row = 0;
for i=1:1:Ng
    num = Ng_matrix(i);
    if num~= 0
        for j=1:1:num
            row = row + 1;
            Vg_temp(row,:) = Vg(i,:);
        end
    end
end

%consttruct one-slot visibility matrix including GSs
Vsg_temp = zeros(N,N);

Vsg_temp(1:Ns,1:Ns) = Vs;
Vsg_temp(Ns+1:size(Vsg_temp,1),1:Ns) = Vg_temp;
Vsg_temp(1:Ns,Ns+1:size(Vsg_temp,1)) = Vg_temp';
Vsg_temp(Ns+1:size(Vsg_temp,1),Ns+1:size(Vsg_temp,1)) = 0;

%consttruct K-slot visibility matrix including GSs
Vsg = zeros(N,N,K);
for k=1:K
    Vsg(:,:,k)=Vsg_temp;
end

%set of satellites that can receive short messages from users and relay them
Nm = [1, 3, 5, 7];

%sm short messages and rm remote messages per slot
sm = 4;
rm = 6;

F2=zeros(1,Ns);
for i=1:1:Ns
    if(ismember(i,Nm))
        F2(1,i) = sm+rm;
    else
        F2(1,i) = rm;
    end
end

F2_o = F2(1,Node_o);
F2_d = F2(1,Node_d);


rateS = 25; %max packets between sats per slot (half-duplex)
rateG = 50; %max packets between sats and ground station

Cs = rateS.*Vs; %max capacity of S-S links
for i=1:N
    for j=1:N
        if (ismember(i,Node_d)&&ismember(j,Node_d)) || (ismember(i,Node_o)&&ismember(j,Node_o))
            Cs(i,j)=0;
        end
    end
end
Cg = rateG.*Vg; %max capacity of S-G links

% max capacity including S-S and S-G links
Csg = [Cs;Cg];
Csg = [Csg,[Cg';0]];

Bmax = 150; %max buffer of each sat node



C_temp = zeros(N,N,K);
for k=1:K
    C_temp(:,:,k)=Csg;
end



%-------------------------------------------------------------------------------------

%decision variables-------------------------------------------------------------------------------------
Y = binvar(N,N,K);
X = intvar(N,N,K,N,K,'full');
B = intvar(N,K+1,N,K,'full');
%B_p = intvar(N,K,N,'full');
Phi = binvar(N,N,'full'); %introduced for PDOP constraints
%Psai = binvar(N,K); %introduced for delay optimization objection
%-------------------------------------------------------------------------------------

%constraints-------------------------------------------------------------------------------------
Cons = [];


%visibility constraints

Cons=[Cons,(Y<=Vsg):'visi'];
%{
for i=1:1:K
    C = [C, triu(Y(:,:,k))<=triu(Vs)];
end
%}

% simultaneous links for each node no more than 1
Cons = [Cons, (sum(Y) <= ones(1,N,K)):'one link'];

% PDOP constriants
Y_t = sum(Y,3);
Cons = [Cons, (Phi<=Y_t<=M1.*Phi):'M1'];

% PDOP constriants, only for satellite nodes, at least set up links with Lmin different satellites
for i=1:Ns
    Cons = [Cons, (sum(Phi(i,1:Ns))>=Lmin):'PDOP'];
end


%traffic flow source
B_temp = zeros(N,K,N,K);
%{
for k=1:K
    B_temp(1,k,1,k) =10;
end
%}

for n=1:Ns
    if(ismember(n,Nm))
        
        for k=1:K
            B_temp(n,k,n,k) = sm+rm;
        end
    else
        for k=1:K
            B_temp(n,k,n,k) = rm;
        end
    end
end



%traffic constraints
%flow conservation
Cons = [Cons, (squeeze(sum(X,1))-squeeze(sum(X,2))==B(:,2:K+1,:,:) - B(:,1:K,:,:) - B_temp):'balance'];


Cons = [Cons, (X>=0):'>0'];
Cons = [Cons, (B>=0):'>0'];


% at state 0, buffer is 0
Cons = [Cons, B(:,1,:,:)==0];


% buffer (sum of all flows) at each node in each state is no more than Bmax
% except for the ground station
Cons = [Cons, (sum(sum(B(1:Ns,:,:,:),4),3)<=Bmax):'Bmax'];

% the number of packets (sum of all flows) through a link is no more than C_temp
Cons = [Cons, (sum(sum(X,5),4)<=C_temp):'Ctemp'];

% to avoid packets through links that are not established
% except for the ground station, all domestic sats could send data to the ground station
Cons = [Cons, (sum(sum(X,5),4)<=M2.*Y):'M2'];




%-------------------------------------------------------------------------------------


%objection and resolution-------------------------------------------------------------------------------------
%B_ = sum(sum(B,4),3);
%obj = B_(N,K+1);


obj=0;
weight = zeros(1,K+1);
for k=1:K+1
    weight(k) = k-1;
end
% sum traffic of the ground station in the last slot

for k=1:K
    B_ = sum(sum(B(1:Ns,:,:,k),1),3);
    obj = obj + ((weight-k+1))*B_';
end

tic
ops = sdpsettings('verbose',2,'solver','gurobi');
% obj, solve the minimize problem
reuslt = optimize(Cons,obj,ops)
toc

if reuslt.problem == 0 % problem =0 代表求解成功
    
    disp(['运行时间: ',num2str(toc)]);
    topo = value(Y);
    file = 'C:\Users\yanzhibo\Documents\yzb\科研\小论文\MILP+GNSS_full_Ka\Result\test\ILP\1.txt';
    fid = fopen(file,'w');
    fclose(fid);
    for slot=1:K
        dlmwrite(file,topo(:,:,slot),'delimiter','\t','newline','pc','-append');
    end
else
    disp('求解出错');
end
%-------------------------------------------------------------------------------------